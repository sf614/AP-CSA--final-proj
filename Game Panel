import javax.swing.*;
import java.awt.*; 
import java.awt.event.*;

public class GamePanel extends JPanel {
    private boolean [] key= new boolean [4];
    private Snake snake;
    private static final int HEIGHT =10;
    private static final int WIDTH =10;
    public GamePanel (){
        setBackground( Color.ORANGE );
        setBorder( BorderFactory.createLineBorder(Color.BLACK ) );
        addKeyListener( new Listen() );
        setFocusable(true); 
    }

    public void paintComponent( Graphics g ) {
        super.paintComponent( g ); 
        g.setColor(Color.GREEN);
        for (int i=0;i<snake.getlength();i++){
            g.drawRect(snake.getx(i), snake.gety(i), HEIGHT, WIDTH);
        }
       g.setColor (Color.RED);
       g.drawRect (snake.getapplex(), snake.getappley(), HEIGHT, WIDTH);
    }
    private class Listen extends KeyAdapter {
        @Override
        public void keyPressed(KeyEvent e){
            if (e.getKeyCode() == KeyEvent.VK_LEFT)
                key[0] = true;
            else if (e.getKeyCode() == KeyEvent.VK_RIGHT)
                key[1] = true;
            else if (e.getKeyCode() == KeyEvent.VK_UP)
                key[2] = true;
            else if (e.getKeyCode() == KeyEvent.VK_DOWN)
                key[3] = true;
if (!snake.getgame()){
            snake.update( calculateDx(), calculateDy() );
            repaint();
        }
}

        @Override
        public void keyReleased(KeyEvent e){
            if (e.getKeyCode() == KeyEvent.VK_LEFT)
                key[0] = false;
            else if (e.getKeyCode() == KeyEvent.VK_RIGHT)
                key[1] = false;
            else if (e.getKeyCode() == KeyEvent.VK_UP)
                key[2] = false;
            else if (e.getKeyCode() == KeyEvent.VK_DOWN)
                key[3] = false;

if (!snake.getgame())      {      
snake.update( calculateDx(), calculateDy() );
            repaint();
        }
}

        private int calculateDx(){
            int dx = 0;
            if ( key[0] )   // left arrow pressed
                dx = dx - 1;
            if ( key[1] )    // right arrow pressed
                dx = dx + 1;

            return dx;
        }

        private int calculateDy(){
            int dy = 0;
            if ( key[2] )   // up arrow pressed
                dy = dy - 1;
            if ( key[3] )    // down arrow pressed
                dy = dy + 1;

            return dy;
        }

    }
}
